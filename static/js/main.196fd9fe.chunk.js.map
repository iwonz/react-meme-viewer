{"version":3,"sources":["components/Meme/index.js","components/MemeList/index.js","components/App/index.js","index.js"],"names":["Meme","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addLike","setState","likes","state","isLiked","_this$props","meme","isDetailsVisible","onOpenDetailsClick","details","react_default","a","createElement","date","author","className","href","permalink","target","src","image","alt","title","onClick","PureComponent","MemeList","activeMemeId","defaultLikedMemeId","toggleActiveMeme","memeId","_this2","_this$state","memes","map","Meme_Meme","id","bind","key","Component","App","memeCount","offset","reversed","memeList","React","createRef","revertMemes","toConsumableArray","reverse","fetch","then","response","json","data","meme_count","loadMemes","onScrollHandle","onScroll","window","addEventListener","removeEventListener","MemeList_MemeList","ref","_this3","isLoading","newOffset","promises","i","push","concat","Promise","all","memeListNode","findDOMNode","current","clientHeight","innerHeight","pageYOffset","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.196fd9fe.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport './style.css';\n\nexport default class Meme extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      likes: props.isLiked ? 1 : 0\n    }\n  }\n  \n  render() {\n    const {meme, isDetailsVisible, onOpenDetailsClick} = this.props;\n\n    const details = isDetailsVisible\n      ? <span>{meme.date} by {meme.author}</span>\n      : '';\n\n    return (\n      <div className=\"meme\">\n        <a href={meme.permalink} target=\"_blank\">\n          <img src={meme.image} alt={meme.title}/>\n        </a>\n\n        <div className=\"meme__content\">\n          <a href={meme.permalink} target=\"_blank\">{meme.title}</a>\n          <br/>\n          <button className=\"meme__details-btn\"\n                  onClick={onOpenDetailsClick}>{isDetailsVisible ? 'Hide' : 'Show'} details\n          </button>\n          <br/>\n          {details}\n          <br/>\n          <button className=\"meme__like\"\n                  onClick={this.addLike}>Like {this.state.likes ? this.state.likes + ' â™¥' : ''}</button>\n        </div>\n      </div>\n    );\n  }\n\n  addLike = () => {\n    this.setState({\n      likes: this.state.likes + 1\n    });\n  };\n};\n","import React, { Component } from 'react';\n\nimport './style.css';\n\nimport Meme from '../Meme';\n\nexport default class MemeList extends Component {\n  state = {\n    activeMemeId: 1,\n    defaultLikedMemeId: 2\n  };\n\n  render() {\n    const {activeMemeId, defaultLikedMemeId} = this.state;\n\n    const memes = this.props.memes.map((meme) => {\n      return <Meme meme={meme}\n                   isLiked={meme.id === defaultLikedMemeId}\n                   isDetailsVisible={meme.id === activeMemeId}\n                   onOpenDetailsClick={this.toggleActiveMeme.bind(this, meme.id)}\n                   key={meme.id}/>;\n    });\n\n    return (\n      <div className=\"meme-list\">\n        {memes}\n      </div>\n    );\n  }\n\n  toggleActiveMeme = (memeId) => this.setState({\n    activeMemeId: this.state.activeMemeId === memeId ? null : memeId\n  });\n};\n","import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\nimport './style.css';\n\nimport MemeList from '../MemeList';\n\nconst MEMES_PER_LOAD = 2;\n\nexport default class App extends Component {\n  state = {\n    memeCount: 0,\n    offset: 0,\n    memes: [],\n    reversed: false\n  };\n\n  memeList = React.createRef();\n\n  componentWillMount() {\n    fetch('https://api.memeload.us/v1/stats')\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          memeCount: data.meme_count\n        });\n\n        this.loadMemes();\n      });\n  }\n\n  componentDidMount() {\n    this.onScrollHandle = this.onScroll.bind(this);\n\n    window.addEventListener('scroll', this.onScrollHandle);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.onScrollHandle);\n  }\n\n  render() {\n    return (\n      <div className=\"meme-finder\">\n        <h1>MemeViewer (thx <a href=\"https://memeload.us\" target=\"_blank\">memeload.us</a>)</h1>\n        <button onClick={ this.revertMemes }>Reverse</button>\n        <MemeList ref={ this.memeList } memes={ this.state.memes } />\n      </div>\n    );\n  }\n\n  /**\n   * Bad code, can't find how to get memes with offset and limit in memeload.us\n   */\n  loadMemes() {\n    if (this.state.isLoading) { return; }\n\n    this.setState({\n      isLoading: true\n    });\n\n    let newOffset = this.state.offset + MEMES_PER_LOAD;\n\n    newOffset = newOffset > this.state.memeCount ? this.state.memeCount : newOffset;\n\n    const promises = [];\n\n    for (let i = this.state.offset + 1; i <= newOffset; i++) {\n      promises.push(\n        fetch(`https://api.memeload.us/v1/get?id=${i}`).then((response) => response.json())\n      );\n    }\n\n    Promise.all(promises)\n      .then((memes) => {\n        this.setState({\n          isLoading: false,\n          offset: newOffset,\n          memes: [...this.state.memes, ...memes]\n        });\n\n        this.onScrollHandle();\n      });\n  }\n\n  onScroll() {\n    const memeListNode = findDOMNode(this.memeList.current);\n\n    if (!memeListNode) { return; }\n\n    if (\n      memeListNode.clientHeight <= window.innerHeight\n      || window.pageYOffset >= memeListNode.clientHeight - (window.innerHeight * 1.4)\n    ) {\n      this.loadMemes();\n    }\n  }\n\n  revertMemes = () => {\n    this.setState({\n      memes: [...this.state.memes].reverse()\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './components/App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}